steps:
  # Step 1: Check/create Artifact Registry (generic repo)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud artifacts repositories describe vamsi-generic-repo --location=asia-east1 --project=enhub-cloud-interns; then
          echo "Repository doesn't exist. Creating now."
          gcloud artifacts repositories create vamsi-generic-repo --repository-format=generic --location=asia-east1 --project=enhub-cloud-interns
        else
          echo "Repository already exists."
        fi

  # Step 2: Zip the application source code (GitHub repo contents)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Zipping source code..."
        apt-get update && apt-get install -y zip
        zip -r /workspace/my-app.zip .

  # Step 3: Upload ZIP to Artifact Registry (generic)
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - artifacts
      - packages
      - upload
      - vamsi-generic-repo/my-app
      - --location=asia-east1
      - --package=my-app
      - --version=latest
      - --source=/workspace/my-app.zip
      - --project=enhub-cloud-interns

  # Step 4: Delete existing VM (if any)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deleting VM if it exists..."
        gcloud compute instances delete my-vm-instance --zone=asia-east1-b --quiet || true

  # Step 5: Create new VM
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - compute
      - instances
      - create
      - my-vm-instance
      - --zone=asia-east1-b
      - --machine-type=e2-micro
      - --image-family=debian-11
      - --image-project=debian-cloud
      - --boot-disk-size=10GB
      - --tags=http-server
      - --scopes=https://www.googleapis.com/auth/cloud-platform
      - --service-account=1064351983714-compute@developer.gserviceaccount.com
      - --project=enhub-cloud-interns

  # Step 6: Create firewall rule to allow TCP:8080
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute firewall-rules describe allow-8080 --project=enhub-cloud-interns &>/dev/null; then
          echo "Creating firewall rule to allow TCP:8080..."
          gcloud compute firewall-rules create allow-8080 \
            --allow tcp:8080 \
            --target-tags=http-server \
            --description="Allow external traffic on port 8080" \
            --direction=INGRESS \
            --priority=1000 \
            --network=default \
            --project=enhub-cloud-interns
        else
          echo "Firewall rule for 8080 already exists."
        fi

  # Step 7: Copy ZIP file to VM
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - compute
      - scp
      - /workspace/my-app.zip
      - sajja_vamsi@my-vm-instance:~/
      - --zone=asia-east1-b
      - --project=enhub-cloud-interns

  # Step 8: SSH into VM, unzip and run application
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - compute
      - ssh
      - sajja_vamsi@my-vm-instance
      - --zone=asia-east1-b
      - --project=enhub-cloud-interns
      - --command= |
          sudo apt-get update && sudo apt-get install -y unzip python3 python3-pip
          unzip -o my-app.zip -d my-app
          cd my-app
          if [ -f requirements.txt ]; then pip3 install -r requirements.txt; fi
          nohup python3 app.py --host=0.0.0.0 --port=8080 &

options:
  logging: CLOUD_LOGGING_ONLY
