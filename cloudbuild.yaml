steps:
  # Step 0: Generate version string
  - name: 'gcr.io/cloud-builders/bash'
    id: 'Generate Version'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        VERSION_TAG="v-$(date +%Y%m%d-%H%M%S)"
        echo "VERSION_TAG=$$VERSION_TAG" > /workspace/version.env
        echo "Generated version: $$VERSION_TAG"

  # Step 1: Check/create Artifact Registry
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud artifacts repositories describe vamsi-zip-repo --location=asia-east1 --project=enhub-cloud-interns; then
          gcloud artifacts repositories create vamsi-zip-repo --repository-format=generic --location=asia-east1 --project=enhub-cloud-interns
        fi

  # Step 2: Download ZIP from GitHub
  - name: 'gcr.io/cloud-builders/curl'
    id: 'Download ZIP'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        curl -L https://github.com/20481A04K2/cloudbuildzipfile/archive/refs/heads/main.zip -o source.zip

  # Step 3: Authenticate
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gsutil cp gs://vamsi-artifact-bucket/enhub-cloud-interns-004fbd59b047.json /workspace/key.json
        gcloud auth activate-service-account --key-file=/workspace/key.json

  # Step 4: Load version
  - name: 'gcr.io/cloud-builders/bash'
    id: 'Load Version'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        echo "Version is $$VERSION_TAG"

  # Step 5: Upload ZIP to Artifact Registry with new version
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Upload ZIP'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        gcloud artifacts generic upload \
          --project="enhub-cloud-interns" \
          --location="asia-east1" \
          --repository="vamsi-zip-repo" \
          --package="source-package" \
          --version="$$VERSION_TAG" \
          --source="source.zip"

  # Step 6: Delete old VM if exists
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Delete VM'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if gcloud compute instances describe my-vm-instance --zone=asia-east1-b --project=enhub-cloud-interns > /dev/null 2>&1; then
          gcloud compute instances delete my-vm-instance --zone=asia-east1-b --quiet
        fi

  # Step 7: Create VM
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create VM'
    args:
      - compute
      - instances
      - create
      - my-vm-instance
      - --zone=asia-east1-b
      - --machine-type=e2-micro
      - --image-family=debian-11
      - --image-project=debian-cloud
      - --boot-disk-size=10GB
      - --tags=http-server,https-server
      - --scopes=https://www.googleapis.com/auth/cloud-platform
      - --service-account=1064351983714-compute@developer.gserviceaccount.com
      - --project=enhub-cloud-interns

  # Step 8: Add SSH key
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Add SSH'
    args:
      - compute
      - instances
      - add-metadata
      - my-vm-instance
      - --zone=asia-east1-b
      - --metadata=ssh-keys="sajja_vamsi:$$(cat /workspace/ssh_key.pub)"
      - --project=enhub-cloud-interns

  # Step 9: Copy ZIP to VM
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Copy ZIP'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud compute scp source.zip sajja_vamsi@my-vm-instance:/home/sajja_vamsi \
        --zone=asia-east1-b --project=enhub-cloud-interns

  # Step 10: SSH and run Flask app
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Run Flask App'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud compute ssh sajja_vamsi@my-vm-instance \
        --zone=asia-east1-b \
        --project=enhub-cloud-interns \
        --command="bash -c '
          set -e
          sudo apt-get update
          sudo apt-get install -y unzip python3-pip
          unzip -o /home/sajja_vamsi/source.zip -d /home/sajja_vamsi/my-app
          cd /home/sajja_vamsi/my-app/cloudbuildzipfile-main
          pip3 install --user flask
          nohup python3 app.py > /home/sajja_vamsi/flask.log 2>&1 &
        '"

options:
  logging: CLOUD_LOGGING_ONLY
